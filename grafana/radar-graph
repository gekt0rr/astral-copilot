// Создадим график радаро в grafana с использованием библиотеки apache/echarts и данных полученных из postgresql

// legend: Здесь определены легенды для данных ("Название1" и "Название2").

// radar: Определены индикаторы для радарного графика, каждый из которых имеет имя и максимальное значение.

// series: Здесь определены данные для графика. У вас есть два набора данных: "Название1" и "Название2", 
// каждый из которых представляет собой значения для каждого индикатора.


// запрос данных из postgresql
// SELECT * FROM product_info
// WHERE product_name IN ($product_name)

// Ответ от postgresql

// "product_name","category_name","main_parameter","deep_parameter","parameter_value","rating"
// MSI gf 63 thin,Ноутбуки,Процессор,Общее количество ядер процессора,6,60
// MSI gf 63 thin,Ноутбуки,Оперативная память,Объем оперативной памяти,16,160
// MSI gf 63 thin,Ноутбуки,Экран,Разрешение экрана,1920 × 1080,40
// ASUS Vivobook 17X K3704VA-AU066,Ноутбуки,Экран,Разрешение экрана,1920 × 1080,40
// ASUS Vivobook 17X K3704VA-AU066,Ноутбуки,Процессор,Общее количество ядер процессора,4,40
// ASUS Vivobook 17X K3704VA-AU066,Ноутбуки,Экран,Диагональ экрана (дюйм),15,
// MSI gf 63 thin,Ноутбуки,Экран,Диагональ экрана (дюйм),15,
// ASUS Vivobook 17X K3704VA-AU066,Ноутбуки,Оперативная память,Объем оперативной памяти,8,80

// в дашборде присктствует преднастроенная переменная $product_name = SELECT DISTINCT product_name FROM product_info;

// 
// Вы можете использовать .map()и .find()Функции JavaScript.
// The refId запрос извлекает данные из источника данных. По умолчанию присвоенные 
// имена выглядят так A, B, и так далее. Приведенный выше код работает с тремя запросами logo, connections, и nodes.
// name  имя столбца фрейма данных. Код выше ссылается на body, source, target, title, и description столбцы.
// Для работы с Grafana 10 и ее более старыми версиями необходимо использовать valuesи values.bufferполя.

// Прир того как данные получены из postgresql, преобразуются в переменные, которые будут использоваться в графике
// const series = data.series.map((s) => {
//     const rates =
//       s.fields.find((f) => f.name === "Rate").values.buffer ||
//       s.fields.find((f) => f.name === "Rate").values;
//     const calls =
//       s.fields.find((f) => f.name === "Calls").values.buffer ||
//       s.fields.find((f) => f.name === "Calls").values;
//     const names =
//       s.fields.find((f) => f.name === "Name").values.buffer ||
//       s.fields.find((f) => f.name === "Name").values;
  
//     return rates.map((d, i) => [d, calls[i], names[i]]);
//   })[0];


data.series.map((s) => { // перебираем массив данных
    if (s.refId === "product_info") { // если refId равен product_info
      product_name = // создаем переменную product_name
        s.fields.find((f) => f.name === "product_name").values.buffer ||        // ищем в массиве fields значение с именем product_name
        s.fields.find((f) => f.name === "product_name").values;                 // и присваиваем его переменной product_name
    } else if (s.refId === "main_parameters_maxratings") {                      // если refId равен main_parameters_maxratings
      category_name =                                                           // создаем переменную category_name
        s.fields.find((f) => f.name === "main_parameter").values.buffer ||      // ищем в массиве fields значение с именем main_parameter
        s.fields.find((f) => f.name === "main_parameter").values;               // и присваиваем его переменной category_name
      rating =                                                                  // создаем переменную rating
        s.fields.find((f) => f.name === "total_max_rating").values.buffer ||    // ищем в массиве fields значение с именем total_max_rating
        s.fields.find((f) => f.name === "total_max_rating").values;             // и присваиваем его переменной rating
    }                                                                           // закрываем условие if
  });                                                                           // закрываем перебор массива данных                           
  
  // Создаем структуру данных для радарной диаграммы
  const radarData = {
    legend: {
      data: product_name,
      left: 'left',
    },
    radar: {
      indicator: 
        category_name.map(
            (category, index) => ({ name: category, max: rating[index] }        )
            ),
        label: { show: true }
        , 
    },
    series: [
      {
        name: 'Budget vs spending',
        type: 'radar',
        areaStyle: {}, // заполняем область
        tooltip: {     
            trigger: 'item'},
        // добавим продукты как name а их рейтинг как value
        data: product_name.map((product) => ({
          value: rating,
          name: product,
          label: { show: true },
        })),
      },
    ],
  };
  
  return radarData;







// // блок для объявления переменных значения которых получены из запроса к postgresql
// // Создадим перенную названий продуктов
//  const product_name = data
//  .series[0] // запрос 0, название запроса product_info
//  .fields[0] // столбец 0, название столбца product_name
//  .values.buffer; // значения

//  // Создадим перенную категорий продуктов
//  const category_name = data
//     .series[1] // запрос 1, название запроса main_parameters_maxratings
//     .fields[0] // столбец 1, название столбца main_parameter
//     .values.buffer; // значения

// // Создадим перенную для рейтингов
// const rating = data
//     .series[1] // запрос 1, название запроса main_parameters_maxratings
//     .fields[1] // столбец 1, название столбца total_max_rating
//     .values.buffer; // значения

// return {
  
//   legend: { // названия, должно быть тем что выберет пользователь из данных полученных из postgresql
//     data: product_name,
//     left: 'center',
//   },
  
  
//   radar: { // индикаторы, каждый из которых имеет имя и максимальное значение
//     // shape: 'circle',
//     indicator: [

//     ]
//   },
  
//   series: [ // данные - представляет собой значения для каждого индикатора
//     {
//       name: '',
//       type: 'radar',
//       data: [

//       ]
//     }
//   ]
// };